:original_name: opengauss_opti_0034.html

.. _opengauss_opti_0034:

Tuning Process
==============

You can analyze and optimize slow SQL statements.

Procedure
---------

#. Collect all table statistics associated with the SQL statements. In a database, statistics indicate the source data of a plan generated by a planner. If no statistics are collected or the statistics are outdated, the execution plan may deteriorate severely, causing performance problems. According to past experience, about 10% performance problems occurred because no statistics are collected. For details, see :ref:`Updating Statistics <opengauss_opti_0035>`.
#. View the execution plan to locate the faulty cause. If the SQL statements have been running for a long period of time and not ended, run the **EXPLAIN** statement to view the execution plan and locate the fault. If the SQL statements have been properly executed, run the **EXPLAIN ANALYZE** or **EXPLAIN PERFORMANCE** statement to check the execution plan and information and locate the fault causes. For details about the execution plan, see :ref:`Introduction to the SQL Execution Plan <opengauss_opti_0031>`.
#. Review and modify a table definition. For details, see :ref:`Reviewing and Modifying a Table Definition <opengauss_opti_0036>`.
#. Identify the causes of slow SQL execution and provide solutions based on the **EXPLAIN** or **EXPLAIN PERFORMANCE.** For details, see :ref:`Typical SQL Tuning Advantages <opengauss_opti_0044>`.
#. Generally, convert some SQL statements to their equivalent statements in all or certain scenarios by rewriting queries. SQL statements are simpler after they are rewritten. Some execution steps can be simplified to improve the performance. Query rewriting methods are suitable for all databases. :ref:`Experience in Rewriting SQL Statements <opengauss_opti_0051>` describes several tuning methods by rewriting SQL statements.
